#!/usr/bin/env python3
"""
AN√ÅLISE: Status de Pagamento e Negocia√ß√£o
Identifica todos os valores √∫nicos usados no BD
"""

import sqlite3
import os

def analisar_status_valores():
    """Analisa valores √∫nicos de status"""
    
    db_path = 'selleta_main.db'
    
    if not os.path.exists(db_path):
        print("‚ùå Banco de dados n√£o encontrado!")
        return False
    
    print("üîç Analisando valores de status no banco...")
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # 1. STATUS_PAGAMENTO
        print("\nüìä VALORES √öNICOS DE STATUS_PAGAMENTO:")
        cursor.execute("""
            SELECT DISTINCT status_pagamento, COUNT(*) as quantidade
            FROM transacoes 
            GROUP BY status_pagamento 
            ORDER BY quantidade DESC
        """)
        status_pagamento = cursor.fetchall()
        
        for status, count in status_pagamento:
            percentual = (count / 24522) * 100  # Total conhecido de transa√ß√µes
            print(f"   ‚Ä¢ '{status}': {count:,} transa√ß√µes ({percentual:.1f}%)")
        
        # 2. STATUS_NEGOCIACAO
        print("\nüìä VALORES √öNICOS DE STATUS_NEGOCIACAO:")
        cursor.execute("""
            SELECT DISTINCT status_negociacao, COUNT(*) as quantidade
            FROM transacoes 
            WHERE status_negociacao IS NOT NULL AND status_negociacao != ''
            GROUP BY status_negociacao 
            ORDER BY quantidade DESC
        """)
        status_negociacao = cursor.fetchall()
        
        if status_negociacao:
            for status, count in status_negociacao:
                print(f"   ‚Ä¢ '{status}': {count:,} transa√ß√µes")
        else:
            print("   ‚ö†Ô∏è  Nenhum valor encontrado para status_negociacao")
        
        # 3. VALORES PADR√ÉO PARA NOVAS TRANSA√á√ïES
        print("\nüéØ RECOMENDA√á√ÉO PARA NOVAS TRANSA√á√ïES:")
        print("   ‚Ä¢ status_negociacao: 'Aprovado' (valor fixo)")
        print("   ‚Ä¢ status_pagamento: 'Previsao' (para transa√ß√µes futuras)")
        print("                    ou 'Atrasado' (se data_vencimento < hoje)")
        
        # 4. VERIFICAR TRANSA√á√ïES RECENTES
        print("\nüìÖ STATUS DAS √öLTIMAS 10 TRANSA√á√ïES CRIADAS:")
        cursor.execute("""
            SELECT id, titulo, status_negociacao, status_pagamento, data_lancamento
            FROM transacoes 
            WHERE origem_importacao = 'MANUAL' OR data_lancamento >= date('now', '-30 days')
            ORDER BY id DESC 
            LIMIT 10
        """)
        recentes = cursor.fetchall()
        
        if recentes:
            for row in recentes:
                id_t, titulo, status_neg, status_pag, data_lanc = row
                titulo_t = (titulo[:30] + '...') if titulo and len(titulo) > 33 else titulo
                print(f"   ID {id_t}: {titulo_t} | Neg: '{status_neg}' | Pag: '{status_pag}'")
        else:
            print("   ‚ö†Ô∏è  Nenhuma transa√ß√£o manual recente encontrada")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro durante a an√°lise: {str(e)}")
        return False
    
    finally:
        conn.close()

if __name__ == "__main__":
    print("=" * 70)
    print("üéØ AN√ÅLISE: STATUS DE PAGAMENTO E NEGOCIA√á√ÉO")
    print("=" * 70)
    
    if analisar_status_valores():
        print("\n‚úÖ AN√ÅLISE CONCLU√çDA!")
    else:
        print("\n‚ùå AN√ÅLISE FALHOU!")
    
    print("=" * 70)