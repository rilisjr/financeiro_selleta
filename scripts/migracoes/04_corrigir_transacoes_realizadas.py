#!/usr/bin/env python3
"""
MIGRA√á√ÉO 04: Corrigir Transa√ß√µes Realizadas
- Atualizar data_pagamento = data_vencimento para transa√ß√µes com status 'Realizado'
- Remover coluna data_baixa (n√£o utilizaremos, data_pagamento ser√° a data de baixa)
- Adicionar valor_pago = valor para transa√ß√µes j√° realizadas
"""

import sqlite3
import os
from datetime import datetime

def executar_correcao():
    """Executa a corre√ß√£o das transa√ß√µes realizadas"""
    
    db_path = 'selleta_main.db'
    
    if not os.path.exists(db_path):
        print("‚ùå Banco de dados n√£o encontrado!")
        return False
    
    print("üöÄ Iniciando corre√ß√£o das transa√ß√µes realizadas...")
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # 1. VERIFICAR SITUA√á√ÉO ATUAL
        print("üîç Verificando situa√ß√£o atual...")
        cursor.execute("""
            SELECT COUNT(*) 
            FROM transacoes 
            WHERE LOWER(status_pagamento) = 'realizado' 
              AND data_pagamento IS NULL
        """)
        transacoes_para_corrigir = cursor.fetchone()[0]
        print(f"üìä Transa√ß√µes 'Realizado' sem data_pagamento: {transacoes_para_corrigir:,}")
        
        if transacoes_para_corrigir == 0:
            print("‚úÖ Nenhuma corre√ß√£o necess√°ria!")
            return True
        
        # 2. ATUALIZAR DATA_PAGAMENTO E VALOR_PAGO PARA TRANSA√á√ïES REALIZADAS
        print(f"üí∞ Corrigindo {transacoes_para_corrigir:,} transa√ß√µes...")
        
        cursor.execute("""
            UPDATE transacoes 
            SET data_pagamento = data_vencimento,
                valor_pago = valor,
                data_ultima_alteracao = ?
            WHERE LOWER(status_pagamento) = 'realizado' 
              AND data_pagamento IS NULL
        """, (datetime.now().isoformat(),))
        
        registros_atualizados = cursor.rowcount
        print(f"‚úÖ {registros_atualizados:,} transa√ß√µes corrigidas!")
        
        # 3. REMOVER COLUNA DATA_BAIXA (SE EXISTIR)
        print("üóëÔ∏è  Removendo coluna data_baixa (n√£o ser√° utilizada)...")
        try:
            # SQLite n√£o suporta DROP COLUMN diretamente, ent√£o vamos criar uma nova tabela
            # Mas primeiro vamos verificar se a coluna existe
            cursor.execute("PRAGMA table_info(transacoes)")
            colunas = [col[1] for col in cursor.fetchall()]
            
            if 'data_baixa' in colunas:
                print("   ‚ö†Ô∏è  Coluna data_baixa encontrada, mas ser√° mantida para compatibilidade")
                print("   üìã A data_pagamento ser√° usada como data de baixa efetiva")
            else:
                print("   ‚úÖ Coluna data_baixa n√£o existe")
        except Exception as e:
            print(f"   ‚ö†Ô∏è  Erro ao verificar coluna data_baixa: {e}")
        
        # 4. VERIFICAR RESULTADOS
        print("üîç Verificando resultados da corre√ß√£o...")
        
        cursor.execute("""
            SELECT COUNT(*) 
            FROM transacoes 
            WHERE LOWER(status_pagamento) = 'realizado' 
              AND data_pagamento IS NOT NULL
        """)
        transacoes_corrigidas = cursor.fetchone()[0]
        
        cursor.execute("""
            SELECT COUNT(*) 
            FROM transacoes 
            WHERE LOWER(status_pagamento) = 'realizado' 
              AND valor_pago IS NOT NULL
        """)
        com_valor_pago = cursor.fetchone()[0]
        
        cursor.execute("""
            SELECT COUNT(*) 
            FROM transacoes 
            WHERE LOWER(status_pagamento) = 'realizado' 
              AND data_pagamento IS NULL
        """)
        ainda_sem_data = cursor.fetchone()[0]
        
        print(f"üìà RESULTADOS:")
        print(f"   ‚úÖ Transa√ß√µes 'Realizado' com data_pagamento: {transacoes_corrigidas:,}")
        print(f"   üí∞ Transa√ß√µes 'Realizado' com valor_pago: {com_valor_pago:,}")
        print(f"   ‚ùå Ainda sem data_pagamento: {ainda_sem_data:,}")
        
        # 5. AMOSTRAS DOS DADOS CORRIGIDOS
        print("\nüéØ AMOSTRA DAS CORRE√á√ïES (primeiras 5 transa√ß√µes):")
        cursor.execute("""
            SELECT 
                id,
                titulo,
                valor,
                data_vencimento,
                data_pagamento,
                valor_pago,
                status_pagamento
            FROM transacoes 
            WHERE LOWER(status_pagamento) = 'realizado' 
              AND data_pagamento IS NOT NULL
            ORDER BY id DESC
            LIMIT 5
        """)
        amostras = cursor.fetchall()
        
        if amostras:
            print("   " + "="*100)
            print(f"   {'ID':<8} {'T√çTULO':<25} {'VALOR':<12} {'DATA_VENC':<12} {'DATA_PAGTO':<12} {'VALOR_PAGO':<12}")
            print("   " + "="*100)
            
            for row in amostras:
                id_t, titulo, valor, data_venc, data_pag, valor_pago, status = row
                titulo_t = (titulo[:22] + '...') if len(titulo) > 25 else titulo
                print(f"   {id_t:<8} {titulo_t:<25} R$ {valor:<9.2f} {str(data_venc)[:10]:<12} {str(data_pag)[:10]:<12} R$ {valor_pago:<9.2f}")
        
        # 6. ESTAT√çSTICAS FINAIS
        print("\nüìä ESTAT√çSTICAS FINAIS:")
        
        cursor.execute("SELECT COUNT(*) FROM transacoes")
        total = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM transacoes WHERE data_pagamento IS NOT NULL")
        com_pagamento = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM transacoes WHERE LOWER(status_pagamento) = 'realizado'")
        realizadas = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM transacoes WHERE LOWER(status_pagamento) IN ('atrasado', 'previsao')")
        pendentes = cursor.fetchone()[0]
        
        print(f"   üìà Total de transa√ß√µes: {total:,}")
        print(f"   üí≥ Com data_pagamento: {com_pagamento:,}")
        print(f"   ‚úÖ Status 'Realizado': {realizadas:,}")
        print(f"   ‚è≥ Pendentes (Atrasado/Previs√£o): {pendentes:,}")
        print(f"   üìä % Realizadas: {(realizadas/total*100):.1f}%")
        
        # Commit das altera√ß√µes
        conn.commit()
        print(f"\n‚úÖ Corre√ß√£o conclu√≠da com sucesso!")
        print(f"üìÖ Data da corre√ß√£o: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro durante a corre√ß√£o: {str(e)}")
        conn.rollback()
        return False
    
    finally:
        conn.close()

def verificar_correcao():
    """Verifica se a corre√ß√£o foi aplicada corretamente"""
    
    db_path = 'selleta_main.db'
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        print("\nüîç VERIFICA√á√ÉO FINAL:")
        
        # Verificar se ainda h√° transa√ß√µes realizadas sem data_pagamento
        cursor.execute("""
            SELECT COUNT(*) 
            FROM transacoes 
            WHERE LOWER(status_pagamento) = 'realizado' 
              AND data_pagamento IS NULL
        """)
        sem_data = cursor.fetchone()[0]
        
        # Verificar se data_pagamento = data_vencimento para as corrigidas
        cursor.execute("""
            SELECT COUNT(*) 
            FROM transacoes 
            WHERE LOWER(status_pagamento) = 'realizado' 
              AND data_pagamento = data_vencimento
              AND valor_pago = valor
        """)
        corrigidas_corretamente = cursor.fetchone()[0]
        
        print(f"   {'‚úÖ' if sem_data == 0 else '‚ùå'} Transa√ß√µes 'Realizado' sem data_pagamento: {sem_data}")
        print(f"   ‚úÖ Transa√ß√µes corrigidas corretamente: {corrigidas_corretamente:,}")
        
        if sem_data == 0:
            print("   üéâ CORRE√á√ÉO 100% CONCLU√çDA!")
        else:
            print("   ‚ö†Ô∏è  Ainda h√° transa√ß√µes para corrigir!")
        
        return sem_data == 0
        
    except Exception as e:
        print(f"‚ùå Erro na verifica√ß√£o: {str(e)}")
        return False
    
    finally:
        conn.close()

if __name__ == "__main__":
    print("=" * 80)
    print("üéØ MIGRA√á√ÉO 04: CORRIGIR TRANSA√á√ïES REALIZADAS")
    print("=" * 80)
    
    if executar_correcao():
        if verificar_correcao():
            print("\nüéâ MIGRA√á√ÉO 04 CONCLU√çDA COM SUCESSO!")
        else:
            print("\n‚ö†Ô∏è  MIGRA√á√ÉO PARCIALMENTE CONCLU√çDA!")
    else:
        print("\n‚ùå MIGRA√á√ÉO 04 FALHOU!")
    
    print("=" * 80)